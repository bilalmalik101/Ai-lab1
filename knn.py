# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vXtX7JRJ7zvl7Ed9MewdlHUMQhgqbnoZ
"""

#Implementing KNN Using a local Small Dataset

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

#step1: Load the dataset
iris = load_iris()
X = iris.data
y = iris.target

#step2
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)

#step3: Initialize the model
model = KNeighborsClassifier(n_neighbors=15)

#step4
model.fit(X_train,y_train)

#step5: Make predictions and calculate accuracy
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

train_accuracy = accuracy_score(y_train, y_train_pred)
test_accuracy = accuracy_score(y_test, y_test_pred)

print("Training Accuracy:", train_accuracy)
print("Testing Accuracy:", test_accuracy)

#KNN implement on dataset CIFAR-10
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from tensorflow.keras.datasets import cifar10
import numpy as np

(X_train, y_train), (X_test, y_test) = cifar10.load_data()

X_train = X_train.reshape(len(X_train), -1)
X_test = X_test.reshape(len(X_test), -1)
y_train = y_train.ravel()
y_test = y_test.ravel()

X_train_small = X_train[:5000]
y_train_small = y_train[:5000]
X_test_small = X_test[:1000]
y_test_small = y_test[:1000]

model = KNeighborsClassifier(n_neighbors=5)
model.fit(X_train_small, y_train_small)

y_pred = model.predict(X_test_small)

accuracy = accuracy_score(y_test_small, y_pred)
print("KNN Accuracy on CIFAR-10 subset:", accuracy)

#KNN implemented on my Own Dataset / customized data set

import pandas as pd
from google.colab import files
uploaded = files.upload()
import pandas as pd
data = pd.read_excel("Pakistani_Students_Data.xlsx")
print(data.head())




from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

# Encode text columns (since KNN works on numeric data)
le = LabelEncoder()
data["Name"] = le.fit_transform(data["Name"])
data["Address"] = le.fit_transform(data["Address"])
data["Department"] = le.fit_transform(data["Department"])

# Select features (X) and target (y)
# Exclude 'Reg No' and 'Contact' as they are non-numeric
X = data[["Age", "Name", "Address"]]
y = data["Department"]

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize model
model = KNeighborsClassifier(n_neighbors=3)

# Train
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Accuracy
acc = accuracy_score(y_test, y_pred)
print("Model Accuracy:", acc)

# For making a new prediction, you'll need to provide the new data in the same format as X_train
# Exclude 'Reg No' and 'Contact' columns
# Example new person data (Age, Name_encoded, Address_encoded)
# You would need to encode the 'Name' and 'Address' of the new person using the same LabelEncoder objects
# For simplicity, using hypothetical encoded values here (5 and 3 are just examples)
new_person = [[21, 5, 3]]
prediction = model.predict(new_person)
print("Predicted Department:", prediction)
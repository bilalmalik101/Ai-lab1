# -*- coding: utf-8 -*-
"""Rep(BFS/DFS).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KZb3rIQ4OyoyeUMcvdf6ucaR5_yR3qSf

**BFS and DFS**
"""

from collections import deque

pakistan_cities = {

    'Islamabad': ['Muzafrabad'],
    'Muzafrabad': ['Karachi', 'Gilgit'],
    'Gilgit': ['Muzafrabad', 'Multan', 'Neelum'],
    'Abbotabad': ['Gilgit', 'Lahore'],
    'Neelum': ['Gilgit'],
    'Lahore': ['Abbotabad', 'Islamabad'],
    'Karachi': ['Lahore', 'Peshawar'],
    'Peshawar': ['Islamabad']
#grapes nodes and keys here

}

def bfs_shortest_path(graph,start,goal):

#double ended queue to store explore paths
  queue = deque([[start]])
#keep track of visted city to avoid visit again or infinite loop
  visited = set()
 #loop to check all paths
  while queue:

   #get path at bigining
    path = queue.popleft()
    current_city = path[-1]
  #check current city for goal
    if current_city == goal:
      return path

    if current_city not in visited:
      visited.add ( current_city )

      for neighbor in graph.get(current_city, []):

        new_path = list(path)

        new_path.append(neighbor)
        #append is to start new path in queue if goal not found
        queue.append(new_path)

  return None

#DFS
def dfs_path(graph, start, goal, path=None, visited=None):
    if path is None:
        path = []
    if visited is None:
        visited = set()

    path.append(start)

    visited.add(start)

    if start == goal:
        return path

    for neighbor in graph.get(start, []):
        if neighbor not in visited:

            result = dfs_path(graph, neighbor, goal, path.copy(), visited.copy())
            # If a path is found, return it immediately
            if result:
                return result

    return None

start_city = "Islamabad"
goal_city = "Peshawar"

bfs_result = bfs_shortest_path(pakistan_cities, start_city, goal_city)
print("BFS Shortest Path from Islamabad to Peshawar:", bfs_result)

# DFS
dfs_result = dfs_path(pakistan_cities, start_city, goal_city)
print("DFS Path from Islamabad to Peshawar:", dfs_result)